<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on shubakki</title>
        <link>https://shubakki.github.io/posts/</link>
        <description>Recent content in Posts on shubakki</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>CC Attribution-NonCommercial 4.0 International License</copyright>
        <lastBuildDate>Tue, 29 Nov 2022 01:17:12 +0100</lastBuildDate>
        <atom:link href="https://shubakki.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Test</title>
            <link>https://shubakki.github.io/posts/2022/11/test/</link>
            <pubDate>Tue, 29 Nov 2022 01:17:12 +0100</pubDate>
            
            <guid>https://shubakki.github.io/posts/2022/11/test/</guid>
            <description>#include &amp;#34;minhook/include/MinHook.h&amp;#34; typedef DWORD( NTAPI *pNtDelayExecution )( IN BOOLEAN Alertable, IN PLARGE_INTEGER DelayInterval ); extern pNtDelayExecution pOrigNtDelayExecution = (pNtDelayExecution)GetProcAddress( GetModuleHandle( L&amp;#34;ntdll.dll&amp;#34; ), &amp;#34;NtDelayExecution&amp;#34; ); DWORD NTAPI NtDelayExecution( IN BOOLEAN Alertable, IN PLARGE_INTEGER DelayInterval ) { // Intercept whatever MessageBoxA( 0, &amp;#34;NO SLEEP 4 U&amp;#34;, &amp;#34;BTFO&amp;#34;, 0 ); // Return legit function ? return pOrigNtDelayExecution( Alertable, (PLARGE_INTEGER)0 ); } DWORD WINAPI InitHooksThread( LPVOID param ) { // MinHook itself requires initialisation, lets do this // before we hook specific API calls.</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;minhook/include/MinHook.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#a6e22e">DWORD</span>( NTAPI <span style="color:#f92672">*</span>pNtDelayExecution )( IN BOOLEAN Alertable, IN PLARGE_INTEGER DelayInterval );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">extern</span> pNtDelayExecution pOrigNtDelayExecution <span style="color:#f92672">=</span> (pNtDelayExecution)GetProcAddress( GetModuleHandle( <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;ntdll.dll&#34;</span> ), <span style="color:#e6db74">&#34;NtDelayExecution&#34;</span> );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>DWORD NTAPI <span style="color:#a6e22e">NtDelayExecution</span>( IN BOOLEAN Alertable, IN PLARGE_INTEGER DelayInterval )
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Intercept whatever
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    MessageBoxA( <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#34;NO SLEEP 4 U&#34;</span>, <span style="color:#e6db74">&#34;BTFO&#34;</span>, <span style="color:#ae81ff">0</span> );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Return legit function ?
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> pOrigNtDelayExecution( Alertable, (PLARGE_INTEGER)<span style="color:#ae81ff">0</span> );
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>DWORD WINAPI <span style="color:#a6e22e">InitHooksThread</span>( LPVOID param ) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// MinHook itself requires initialisation, lets do this
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// before we hook specific API calls.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (MH_Initialize() <span style="color:#f92672">!=</span> MH_OK) {
</span></span><span style="display:flex;"><span>        OutputDebugString( TEXT( <span style="color:#e6db74">&#34;Failed to initalize MinHook library</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span> ) );
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    MH_STATUS status <span style="color:#f92672">=</span> MH_CreateHookApi( TEXT( <span style="color:#e6db74">&#34;ntdll&#34;</span> ), <span style="color:#e6db74">&#34;NtDelayExecution&#34;</span>, NtDelayExecution,
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">reinterpret_cast</span><span style="color:#f92672">&lt;</span>LPVOID <span style="color:#f92672">*&gt;</span>( <span style="color:#f92672">&amp;</span>pOrigNtDelayExecution ) );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Enable our hooks so they become active
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    status <span style="color:#f92672">=</span> MH_EnableHook( MH_ALL_HOOKS );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> status;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>BOOL APIENTRY <span style="color:#a6e22e">DllMain</span>( HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved )
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> ( ul_reason_for_call )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> DLL_PROCESS_ATTACH: {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">//We are not interested in callbacks when a thread is created
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        DisableThreadLibraryCalls( hModule );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">//We need to create a thread when initialising our hooks since
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">//DllMain is prone to lockups if executing code inline.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        HANDLE hThread <span style="color:#f92672">=</span> CreateThread( <span style="color:#66d9ef">nullptr</span>, <span style="color:#ae81ff">0</span>, InitHooksThread, <span style="color:#66d9ef">nullptr</span>, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">nullptr</span> );
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (hThread <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nullptr</span>) {
</span></span><span style="display:flex;"><span>            CloseHandle( hThread );
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> DLL_PROCESS_DETACH:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> TRUE;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
